@misc{jong2019scott,
    title={The Scott model of PCF in univalent type theory},
    author={Tom de Jong},
    year={2019},
    eprint={1904.09810},
    archivePrefix={arXiv},
    primaryClass={math.LO}
}

@misc{escard2019introduction,
    title={Introduction to Univalent Foundations of Mathematics with Agda},
    author={Martín Hötzel Escardó},
    year={2019},
    eprint={1911.00580},
    archivePrefix={arXiv},
    primaryClass={cs.LO}
}

@article{GOUEZEL20191258,
title = "A corrected quantitative version of the Morse lemma",
journal = "Journal of Functional Analysis",
volume = "277",
number = "4",
pages = "1258 - 1268",
year = "2019",
issn = "0022-1236",
doi = "https://doi.org/10.1016/j.jfa.2019.02.021",
author = "Sébastien Gouëzel and Vladimir Shchur",
keywords = "Morse lemma, Gromov-hyperbolic space, Quasi-geodesic, Isabelle/HOL",
abstract = "There is a gap in the proof of the main theorem in the article [5] on optimal bounds for the Morse lemma in Gromov-hyperbolic spaces. We correct this gap, showing that the main theorem of [5] is true. We also describe a computer certification of this result."
}}

@InProceedings{escardoknapppartial,
  author =	{Mart{\'i}n H. Escard{\'o} and Cory M. Knapp},
  title =	{{Partial Elements and Recursion via Dominances in Univalent Type Theory}},
  booktitle =	{26th EACSL Annual Conference on Computer Science Logic (CSL 2017)},
  pages =	{21:1--21:16},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-045-3},
  ISSN =	{1868-8969},
  year =	{2017},
  volume =	{82},
  editor =	{Valentin Goranko and Mads Dam},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URN =		{urn:nbn:de:0030-drops-76822},
  doi =		{10.4230/LIPIcs.CSL.2017.21},
  annote =	{Keywords: univalent type theory, homotopy type theory, partial function, dominance, recursion theory, computability theory}
}

@techreport{weihrauch:95,
   author      = {Weihrauch, Klaus},
   title       = {A Simple Introduction to Computable Analysis},
   institution = {FernUniversit\"at Hagen},
   year        = {1995},
   number      = {171},
   note        = {Informatik Berichte},
   %address     = {Hagen}, % optional
   %month       = {8},     % optional
}
@Article{	  Plotkin1977,
  Title		= "LCF considered as a programming language",
  Journal	= "Theoretical Computer Science",
  Volume	= "5",
  Number	= "3",
  Pages		= "223--255",
  Year		= "1977",
  DOI		= "10.1016/0304-3975(77)90044-5",
  Author	= "G.D. Plotkin"
}

@Book{		  HoTTbook,
  Author	= {The {Univalent Foundations Program}},
  Title		= {Homotopy Type Theory: Univalent Foundations of
		  Mathematics},
  Publisher	= {\url{https://homotopytypetheory.org/book}},
  Address	= {Institute for Advanced Study},
  Year		= {2013}
}

@book{domaintheoreticfoundations,
author = {Streicher, Thomas},
title = {Domain-Theoretic Foundations of Functional Programming},
year = {2006},
isbn = {9812701427},
publisher = {World Scientific Publishing Co., Inc.},
address = {USA}
}

@book{10.5555/509043,
author = {Pierce, Benjamin C.},
title = {Types and Programming Languages},
year = {2002},
isbn = {0262162091},
publisher = {The MIT Press},
edition = {1st}
}

@Unpublished{	  Plotkin1983,
  Title		= {Domains},
  Author	= {Plotkin, Gordon},
  URL		= {https://homepages.inf.ed.ac.uk/gdp/publications/Domains_a4.ps},
  Note		= {Lecture notes on domain theory, known as the \emph{Pisa
		  Notes}},
  Year		= {1983}
}

@article{PLFA,
title = "Programming language foundations in Agda",
journal = "Science of Computer Programming",
volume = "194",
pages = "102440",
year = "2020",
issn = "0167-6423",
doi = "https://doi.org/10.1016/j.scico.2020.102440",
author = "Wen Kokke and Jeremy G. Siek and Philip Wadler",
keywords = "Agda, Coq, Lambda calculus, Dependent types",
abstract = "One of the leading textbooks for formal methods is Software Foundations (SF), written by Benjamin Pierce in collaboration with others, and based on Coq. After five years using SF in the classroom, we came to the conclusion that Coq is not the best vehicle for this purpose, as too much of the course needs to focus on learning tactics for proof derivation, to the cost of learning programming language theory. Accordingly, we have written a new textbook, Programming Language Foundations in Agda (PLFA). PLFA covers much of the same ground as SF, although it is not a slavish imitation. What did we learn from writing PLFA? First, that it is possible. One might expect that without proof tactics that the proofs become too long, but in fact proofs in PLFA are about the same length as those in SF. Proofs in Coq require an interactive environment to be understood, while proofs in Agda can be read on the page. Second, that constructive proofs of preservation and progress give immediate rise to a prototype evaluator. This fact is obvious in retrospect but it is not exploited in SF (which instead provides a separate normalise tactic) nor can we find it in the literature. Third, that using extrinsically-typed terms is far less perspicuous than using intrinsically-typed terms. SF uses the former presentation, while PLFA presents both; the former uses about 1.6 as many lines of Agda code as the latter, roughly the golden ratio. The textbook is written as a literate Agda script, and can be found here: http://plfa.inf.ed.ac.uk"
}

@article{DEBRUIJN1972381,
title = "Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem",
journal = "Indagationes Mathematicae (Proceedings)",
volume = "75",
number = "5",
pages = "381 - 392",
year = "1972",
issn = "1385-7258",
doi = "https://doi.org/10.1016/1385-7258(72)90034-0",
author = "N.G de Bruijn",
abstract = "In ordinary lambda calculus the occurrences of a bound variable are made recognizable by the use of one and the same (otherwise irrelevant) name at all occurrences. This convention is known to cause considerable trouble in cases of substitution. In the present paper a different notational system is developed, where occurrences of variables are indicated by integers giving the “distance” to the binding λ instead of a name attached to that λ. The system is claimed to be efficient for automatic formula manipulation as well as for metalingual discussion. As an example the most essential part of a proof of the Church-Rosser theorem is presented in this namefree calculus."
}

@Unpublished{	  TypeTopology,
  Author	= {Escard\'o, Mart\'in H\"otzel and others},
  Title		= {{TypeTopology --- Various new theorems in constructive
		  univalent mathematics written in {A}gda}},
  URL		= {https://www.cs.bham.ac.uk/~mhe/agda-new/}
}

@misc{escard2019introduction,
    title={Introduction to Univalent Foundations of Mathematics with Agda},
    author={Martín Hötzel Escardó},
    year={2019},
    eprint={1911.00580},
    archivePrefix={arXiv},
    primaryClass={cs.LO}
}

@Unpublished{	  AgdaDocUniverses,
  shorthand     = {Agd},
  Author	= {The Agda Team},
  Title		= {{Universe Levels - Agda 2.6.0 documentation}},
  URL		= {https://agda.readthedocs.io/en/v2.6.0/language/universe-levels.html}
}

@Article{	  Scott1993,
  Title		= "A type-theoretical alternative to {ISWIM}, {CUCH}, {OWHY}",
  Journal	= "Theoretical Computer Science",
  Volume	= "121",
  Number	= "1",
  Pages		= "411--440",
  Year		= "1993",
  DOI		= "10.1016/0304-3975(93)90095-B",
  Author	= "Dana S. Scott"
}

@incollection{howard:80,
 author =       {William A. Howard},
 booktitle = {To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism},
 title =  {The Formulae-as-types notion of construction},
 year =         {1980 (originally circulated 1969)},
 pages =        "479-490",
 ISBN = {​978-0-12-349050-6​}
}